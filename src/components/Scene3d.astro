---
import SceneControls from './SceneControls.astro';
---

<div id="scene-container"></div>
<div id="tooltip-1" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-2" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-3" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-4" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-5" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-6" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-7" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-8" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-9" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-10" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-11" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-12" class="dot-tooltip" style="display:none;"></div>
<div id="tooltip-13" class="dot-tooltip" style="display:none;"></div>
<SceneControls />

<script>
	import * as THREE from 'three';
	import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
	import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
	import { TooltipHandler } from './TooltipHandler';

	// Scene setup
	const container = document.getElementById('scene-container');
	const scene = new THREE.Scene();
	const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
	const renderer = new THREE.WebGLRenderer({ antialias: true });

	// Set renderer size to fill browser
	renderer.setSize(window.innerWidth, window.innerHeight);
	renderer.setPixelRatio(window.devicePixelRatio);
	container.appendChild(renderer.domElement);

	// // Add a floor
	// const floorGeometry = new THREE.PlaneGeometry(20, 20);
	// const floorMaterial = new THREE.MeshStandardMaterial({ 
	// 	color: 0xffffff,
	// 	roughness: 0,
	// 	metalness: 0
	// });
	// const floor = new THREE.Mesh(floorGeometry, floorMaterial);
	// floor.rotation.x = -Math.PI / 2; // Rotate to be horizontal
	// floor.position.y = -0.58;
	// scene.add(floor);

	// Add ambient light
	const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
	scene.add(ambientLight);

	// Add directional light (like sunlight)
	const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
	directionalLight.position.set(5, 5, 5);
	directionalLight.castShadow = true;
	scene.add(directionalLight);

	// Position camera
	camera.position.set(0.68, 0.27, 2.08);
	camera.lookAt(0.00, 0.00, 0.00);

	// Handle window resize
	window.addEventListener('resize', () => {
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
		renderer.setSize(window.innerWidth, window.innerHeight);
	});

	// Add orbit controls
	const controls = new OrbitControls(camera, renderer.domElement);
	controls.enableDamping = true;
	controls.dampingFactor = 0.05;

	// Initialize tooltip handler
	const tooltipHandler = new TooltipHandler(camera, controls);

	// Log camera position on change
	controls.addEventListener('change', () => {
		const target = controls.target;
		console.log('Camera:', {
			position: {
				x: camera.position.x.toFixed(2),
				y: camera.position.y.toFixed(2),
				z: camera.position.z.toFixed(2)
			},
			lookAt: {
				x: target.x.toFixed(2),
				y: target.y.toFixed(2),
				z: target.z.toFixed(2)
			}
		});
	});

	// Load GLTF model
	const loader = new GLTFLoader();
	let model;

	// UI Controls Setup
	function setupUIControls() {
		// Camera Position Controls
		['x', 'y', 'z'].forEach((axis, index) => {
			const control = document.getElementById(`camera-${axis}-control`);
			const display = document.getElementById(`camera-${axis}`);
			if (control && display) {
				control.value = camera.position[axis];
				display.textContent = camera.position[axis].toFixed(2);
				control.addEventListener('input', (e) => {
					camera.position[axis] = parseFloat(e.target.value);
					display.textContent = e.target.value;
				});
			}
		});

		// Camera Look At Controls
		['x', 'y', 'z'].forEach((axis, index) => {
			const control = document.getElementById(`lookat-${axis}-control`);
			const display = document.getElementById(`lookat-${axis}`);
			if (control && display) {
				control.value = controls.target[axis];
				display.textContent = controls.target[axis].toFixed(2);
				control.addEventListener('input', (e) => {
					controls.target[axis] = parseFloat(e.target.value);
					display.textContent = e.target.value;
				});
			}
		});

		// Zoom Control
		const zoomControl = document.getElementById('zoom-control');
		const zoomDisplay = document.getElementById('zoom-level');
		if (zoomControl && zoomDisplay) {
			zoomControl.addEventListener('input', (e) => {
				const zoom = parseFloat(e.target.value);
				camera.position.z = zoom;
				zoomDisplay.textContent = zoom.toFixed(2);
			});
		}

		// Model Position Controls (will be set up after model loads)
		function setupModelControls() {
			if (!model) return;

			['x', 'y', 'z'].forEach((axis) => {
				const control = document.getElementById(`model-${axis}-control`);
				const display = document.getElementById(`model-${axis}`);
				if (control && display) {
					control.value = model.position[axis];
					display.textContent = model.position[axis].toFixed(2);
					control.addEventListener('input', (e) => {
						model.position[axis] = parseFloat(e.target.value);
						display.textContent = e.target.value;
					});
				}
			});

			// Model Rotation Controls
			['x', 'y', 'z'].forEach((axis) => {
				const control = document.getElementById(`rotation-${axis}-control`);
				const display = document.getElementById(`rotation-${axis}`);
				if (control && display) {
					control.value = model.rotation[axis];
					display.textContent = model.rotation[axis].toFixed(2);
					control.addEventListener('input', (e) => {
						model.rotation[axis] = parseFloat(e.target.value);
						display.textContent = e.target.value;
					});
				}
			});
		}

		// Update displays on camera change
		controls.addEventListener('change', () => {
			['x', 'y', 'z'].forEach((axis) => {
				const display = document.getElementById(`camera-${axis}`);
				const control = document.getElementById(`camera-${axis}-control`);
				if (display && control) {
					display.textContent = camera.position[axis].toFixed(2);
					control.value = camera.position[axis];
				}

				const lookatDisplay = document.getElementById(`lookat-${axis}`);
				const lookatControl = document.getElementById(`lookat-${axis}-control`);
				if (lookatDisplay && lookatControl) {
					lookatDisplay.textContent = controls.target[axis].toFixed(2);
					lookatControl.value = controls.target[axis];
				}
			});
		});

		return setupModelControls;
	}

	const setupModelControls = setupUIControls();

	loader.load(
		'/models/model.gltf',
		(gltf) => {
			model = gltf.scene;
			scene.add(model);
			
			// Center and scale the model
			const box = new THREE.Box3().setFromObject(model);
			const center = box.getCenter(new THREE.Vector3());
			const size = box.getSize(new THREE.Vector3());
			
			// Move model so its base sits at y=0
			model.position.x -= center.x;
			model.position.y -= box.min.y; // base at y=0
			model.position.z -= center.z;
			
			// Set initial model rotation
			model.rotation.x = 1.3;
			model.rotation.y = 0;
			model.rotation.z = 0;
			
			// Scale the model if needed
			const maxDim = Math.max(size.x, size.y, size.z);
			const scale = 2 / maxDim;
			model.scale.multiplyScalar(scale);

			// Set the model in tooltip handler
			tooltipHandler.setModel(model);

			// Optionally, increase camera FOV for a more forgiving view
			camera.fov = 60;
			camera.updateProjectionMatrix();

			// Centering math
			const modelHeight = size.y * scale;
			const centerY = modelHeight / 2;

			// Camera Y is above the center, looking at the center
			camera.position.set(0.95, 0.05, 3.08);
			camera.lookAt(0.00, centerY, 0.00);

			// Update controls target
			controls.target.set(0.00, centerY, 0.00);
			controls.update();

			// Setup model controls after everything is positioned
			setupModelControls();
		},
		(xhr) => {
			console.log((xhr.loaded / xhr.total * 100) + '% loaded');
		},
		(error) => {
			console.error('An error happened while loading the model:', error);
		}
	);

	// Animation loop
	function animate() {
		requestAnimationFrame(animate);
		controls.update();
		tooltipHandler.updateTooltipPositions(camera);
		renderer.render(scene, camera);
	}

	// Start animation
	animate();

	// Add a skybox (simple version)
	scene.background = new THREE.Color(0xffffff);

	// Click handler for getting coordinates
	renderer.domElement.addEventListener('click', (event) => {
		const mouse = new THREE.Vector2();
		mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
		mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;

		const raycaster = new THREE.Raycaster();
		raycaster.setFromCamera(mouse, camera);

		if (model) {
			const intersects = raycaster.intersectObject(model, true);
			if (intersects.length > 0) {
				const point = intersects[0].point;
	 			console.log('Clicked 3D coordinate:', point);
			}
		}
	});

	// Force an initial tooltip position update
	tooltipHandler.updateTooltipPositions(camera);
</script>

<style>
	#scene-container {
		width: 100%;
		height: 100vh;
		display: block;
	}

	.dot-tooltip {
		position: absolute;
		width: 22px;
		height: 22px;
		background: #ff5a00;
		border-radius: 50%;
		box-shadow: 0 0 16px 4px rgba(255,90,0,0.3);
		pointer-events: auto;
		cursor: pointer;
		z-index: 2000;
		transform: translate(-50%, -50%);
		animation: pulse 1.2s infinite;
		border: 2px solid #fff;
	}

	@keyframes pulse {
		0% { box-shadow: 0 0 0 0 rgba(255,90,0,0.7); }
		70% { box-shadow: 0 0 0 12px rgba(255,90,0,0); }
		100% { box-shadow: 0 0 0 0 rgba(255,90,0,0); }
	}
</style>
